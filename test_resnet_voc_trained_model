{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"test_resnet_voc_trained_model","provenance":[],"collapsed_sections":[],"mount_file_id":"13uybQP7X__6qyOt4PMkSnKLybsbwvrvI","authorship_tag":"ABX9TyPYnnWIAndDQ59unO+sgKmi"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"qUYHZ2x1jufb","colab_type":"code","outputId":"91047c1a-fd6a-43aa-c3a6-24eb407d1c8f","executionInfo":{"status":"ok","timestamp":1591038393525,"user_tz":-330,"elapsed":6642,"user":{"displayName":"Sahil Gupta","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiBFdUsgo_o-sbVGLOoOH_q9rzy9TB6l3vRziuKuA=s64","userId":"14306816453826020803"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["# %tensorflow_version 2.x\n","!pip install pycocotools"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Requirement already satisfied: pycocotools in /usr/local/lib/python3.6/dist-packages (2.0.0)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"8xWXw1Q3jvTp","colab_type":"code","colab":{}},"source":["import os\n","import pathlib\n","\n","if \"models\" in pathlib.Path.cwd().parts:\n","  while \"models\" in pathlib.Path.cwd().parts:\n","    os.chdir('..')\n","elif not pathlib.Path('models').exists():\n","  !git clone --depth 1 https://github.com/tensorflow/models"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Mhm0dnCoj628","colab_type":"code","outputId":"0a8cea70-7e84-47f5-8e6d-6a9ae0f3e018","executionInfo":{"status":"ok","timestamp":1591038396570,"user_tz":-330,"elapsed":1847,"user":{"displayName":"Sahil Gupta","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiBFdUsgo_o-sbVGLOoOH_q9rzy9TB6l3vRziuKuA=s64","userId":"14306816453826020803"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["%%bash\n","cd models/research/\n","protoc object_detection/protos/*.proto --python_out=."],"execution_count":0,"outputs":[{"output_type":"stream","text":["object_detection/protos/input_reader.proto: warning: Import object_detection/protos/image_resizer.proto but not used.\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"Rjk3XZ8KkFoh","colab_type":"code","outputId":"be927e2b-8a19-470d-b856-51aed7d9e064","executionInfo":{"status":"ok","timestamp":1591038403650,"user_tz":-330,"elapsed":6240,"user":{"displayName":"Sahil Gupta","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiBFdUsgo_o-sbVGLOoOH_q9rzy9TB6l3vRziuKuA=s64","userId":"14306816453826020803"}},"colab":{"base_uri":"https://localhost:8080/","height":394}},"source":["%%bash \n","cd models/research\n","pip install ."],"execution_count":0,"outputs":[{"output_type":"stream","text":["Processing /content/models/research\n","Requirement already satisfied: Pillow>=1.0 in /usr/local/lib/python3.6/dist-packages (from object-detection==0.1) (7.0.0)\n","Requirement already satisfied: Matplotlib>=2.1 in /usr/local/lib/python3.6/dist-packages (from object-detection==0.1) (3.2.1)\n","Requirement already satisfied: Cython>=0.28.1 in /usr/local/lib/python3.6/dist-packages (from object-detection==0.1) (0.29.18)\n","Requirement already satisfied: python-dateutil>=2.1 in /usr/local/lib/python3.6/dist-packages (from Matplotlib>=2.1->object-detection==0.1) (2.8.1)\n","Requirement already satisfied: numpy>=1.11 in /usr/local/lib/python3.6/dist-packages (from Matplotlib>=2.1->object-detection==0.1) (1.18.4)\n","Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/local/lib/python3.6/dist-packages (from Matplotlib>=2.1->object-detection==0.1) (2.4.7)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.6/dist-packages (from Matplotlib>=2.1->object-detection==0.1) (0.10.0)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.6/dist-packages (from Matplotlib>=2.1->object-detection==0.1) (1.2.0)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.6/dist-packages (from python-dateutil>=2.1->Matplotlib>=2.1->object-detection==0.1) (1.12.0)\n","Building wheels for collected packages: object-detection\n","  Building wheel for object-detection (setup.py): started\n","  Building wheel for object-detection (setup.py): finished with status 'done'\n","  Created wheel for object-detection: filename=object_detection-0.1-cp36-none-any.whl size=1357899 sha256=da9e5cfff4dc4f38646a07098c72ea89d735f864c102b7bcbc3bc4474c461359\n","  Stored in directory: /tmp/pip-ephem-wheel-cache-sco8tv3b/wheels/94/49/4b/39b051683087a22ef7e80ec52152a27249d1a644ccf4e442ea\n","Successfully built object-detection\n","Installing collected packages: object-detection\n","  Found existing installation: object-detection 0.1\n","    Uninstalling object-detection-0.1:\n","      Successfully uninstalled object-detection-0.1\n","Successfully installed object-detection-0.1\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Q9xViGo7kOTB","colab_type":"code","colab":{}},"source":["%%bash\n","cp -a \"/content/models/research/slim/.\" \"/content/models/research/object_detection/\""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"dSbhSLpikLD-","colab_type":"code","outputId":"35861fa6-e30d-44d7-be30-556e196f03a3","executionInfo":{"status":"ok","timestamp":1591038419305,"user_tz":-330,"elapsed":11798,"user":{"displayName":"Sahil Gupta","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiBFdUsgo_o-sbVGLOoOH_q9rzy9TB6l3vRziuKuA=s64","userId":"14306816453826020803"}},"colab":{"base_uri":"https://localhost:8080/","height":833}},"source":["import sys\n","sys.path.append('/content/models/research/slim/')\n","sys.path.append(['/content/models/research/', '/content/models/research/slim/', '/content/models/research/object_detection/'])\n","!python /content/models/research/slim/setup.py build\n","!python /content/models/research/slim/setup.py install"],"execution_count":0,"outputs":[{"output_type":"stream","text":["running build\n","running install\n","running bdist_egg\n","running egg_info\n","writing slim.egg-info/PKG-INFO\n","writing dependency_links to slim.egg-info/dependency_links.txt\n","writing requirements to slim.egg-info/requires.txt\n","writing top-level names to slim.egg-info/top_level.txt\n","reading manifest file 'slim.egg-info/SOURCES.txt'\n","writing manifest file 'slim.egg-info/SOURCES.txt'\n","installing library code to build/bdist.linux-x86_64/egg\n","running install_lib\n","warning: install_lib: 'build/lib' does not exist -- no Python modules to install\n","\n","creating build/bdist.linux-x86_64/egg\n","creating build/bdist.linux-x86_64/egg/EGG-INFO\n","copying slim.egg-info/PKG-INFO -> build/bdist.linux-x86_64/egg/EGG-INFO\n","copying slim.egg-info/SOURCES.txt -> build/bdist.linux-x86_64/egg/EGG-INFO\n","copying slim.egg-info/dependency_links.txt -> build/bdist.linux-x86_64/egg/EGG-INFO\n","copying slim.egg-info/requires.txt -> build/bdist.linux-x86_64/egg/EGG-INFO\n","copying slim.egg-info/top_level.txt -> build/bdist.linux-x86_64/egg/EGG-INFO\n","zip_safe flag not set; analyzing archive contents...\n","creating 'dist/slim-0.1-py3.6.egg' and adding 'build/bdist.linux-x86_64/egg' to it\n","removing 'build/bdist.linux-x86_64/egg' (and everything under it)\n","Processing slim-0.1-py3.6.egg\n","Removing /usr/local/lib/python3.6/dist-packages/slim-0.1-py3.6.egg\n","Copying slim-0.1-py3.6.egg to /usr/local/lib/python3.6/dist-packages\n","slim 0.1 is already the active version in easy-install.pth\n","\n","Installed /usr/local/lib/python3.6/dist-packages/slim-0.1-py3.6.egg\n","Processing dependencies for slim==0.1\n","Searching for tf-slim==1.1.0\n","Best match: tf-slim 1.1.0\n","Processing tf_slim-1.1.0-py3.6.egg\n","tf-slim 1.1.0 is already the active version in easy-install.pth\n","\n","Using /usr/local/lib/python3.6/dist-packages/tf_slim-1.1.0-py3.6.egg\n","Searching for six==1.12.0\n","Best match: six 1.12.0\n","Adding six 1.12.0 to easy-install.pth file\n","\n","Using /usr/local/lib/python3.6/dist-packages\n","Searching for absl-py==0.9.0\n","Best match: absl-py 0.9.0\n","Adding absl-py 0.9.0 to easy-install.pth file\n","\n","Using /usr/local/lib/python3.6/dist-packages\n","Finished processing dependencies for slim==0.1\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"wnBjcyaTk0Ir","colab_type":"code","outputId":"5a8bfd8d-f43b-46d0-87b7-d3c67c456a4d","executionInfo":{"status":"ok","timestamp":1591038427790,"user_tz":-330,"elapsed":7712,"user":{"displayName":"Sahil Gupta","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiBFdUsgo_o-sbVGLOoOH_q9rzy9TB6l3vRziuKuA=s64","userId":"14306816453826020803"}},"colab":{"base_uri":"https://localhost:8080/","height":833}},"source":["import sys\n","sys.path.append('/content/models/research/slim/')\n","sys.path.extend(['/content/models/research/', '/content/models/research/slim/', '/content/models/research/object_detection/'])\n","!python /content/models/research/object_detection/setup.py build\n","!python /content/models/research/object_detection/setup.py install"],"execution_count":0,"outputs":[{"output_type":"stream","text":["running build\n","running install\n","running bdist_egg\n","running egg_info\n","writing slim.egg-info/PKG-INFO\n","writing dependency_links to slim.egg-info/dependency_links.txt\n","writing requirements to slim.egg-info/requires.txt\n","writing top-level names to slim.egg-info/top_level.txt\n","reading manifest file 'slim.egg-info/SOURCES.txt'\n","writing manifest file 'slim.egg-info/SOURCES.txt'\n","installing library code to build/bdist.linux-x86_64/egg\n","running install_lib\n","warning: install_lib: 'build/lib' does not exist -- no Python modules to install\n","\n","creating build/bdist.linux-x86_64/egg\n","creating build/bdist.linux-x86_64/egg/EGG-INFO\n","copying slim.egg-info/PKG-INFO -> build/bdist.linux-x86_64/egg/EGG-INFO\n","copying slim.egg-info/SOURCES.txt -> build/bdist.linux-x86_64/egg/EGG-INFO\n","copying slim.egg-info/dependency_links.txt -> build/bdist.linux-x86_64/egg/EGG-INFO\n","copying slim.egg-info/requires.txt -> build/bdist.linux-x86_64/egg/EGG-INFO\n","copying slim.egg-info/top_level.txt -> build/bdist.linux-x86_64/egg/EGG-INFO\n","zip_safe flag not set; analyzing archive contents...\n","creating 'dist/slim-0.1-py3.6.egg' and adding 'build/bdist.linux-x86_64/egg' to it\n","removing 'build/bdist.linux-x86_64/egg' (and everything under it)\n","Processing slim-0.1-py3.6.egg\n","Removing /usr/local/lib/python3.6/dist-packages/slim-0.1-py3.6.egg\n","Copying slim-0.1-py3.6.egg to /usr/local/lib/python3.6/dist-packages\n","slim 0.1 is already the active version in easy-install.pth\n","\n","Installed /usr/local/lib/python3.6/dist-packages/slim-0.1-py3.6.egg\n","Processing dependencies for slim==0.1\n","Searching for tf-slim==1.1.0\n","Best match: tf-slim 1.1.0\n","Processing tf_slim-1.1.0-py3.6.egg\n","tf-slim 1.1.0 is already the active version in easy-install.pth\n","\n","Using /usr/local/lib/python3.6/dist-packages/tf_slim-1.1.0-py3.6.egg\n","Searching for six==1.12.0\n","Best match: six 1.12.0\n","Adding six 1.12.0 to easy-install.pth file\n","\n","Using /usr/local/lib/python3.6/dist-packages\n","Searching for absl-py==0.9.0\n","Best match: absl-py 0.9.0\n","Adding absl-py 0.9.0 to easy-install.pth file\n","\n","Using /usr/local/lib/python3.6/dist-packages\n","Finished processing dependencies for slim==0.1\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"DpcSLvuhq1in","colab_type":"code","colab":{}},"source":["import numpy as np\n","import os\n","import six.moves.urllib as urllib\n","import sys\n","import tarfile\n","import tensorflow as tf\n","import zipfile\n","\n","from collections import defaultdict\n","from io import StringIO\n","from matplotlib import pyplot as plt\n","from PIL import Image\n","from IPython.display import display"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"31ED-uiuHs_i","colab_type":"code","outputId":"0c06ded6-bdf4-418f-d5db-2349a7b551d0","executionInfo":{"status":"ok","timestamp":1591038431970,"user_tz":-330,"elapsed":1799,"user":{"displayName":"Sahil Gupta","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiBFdUsgo_o-sbVGLOoOH_q9rzy9TB6l3vRziuKuA=s64","userId":"14306816453826020803"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["print(tf.__version__)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["2.2.0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"UxVyb9iUkeQi","colab_type":"code","colab":{}},"source":["from object_detection.utils import ops as utils_ops\n","from object_detection.utils import label_map_util\n","from object_detection.utils import visualization_utils as vis_util"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"BDO5LdhHkgna","colab_type":"code","outputId":"4168a430-69c5-40eb-b695-ba4fe9a87298","executionInfo":{"status":"ok","timestamp":1591038584873,"user_tz":-330,"elapsed":69668,"user":{"displayName":"Sahil Gupta","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiBFdUsgo_o-sbVGLOoOH_q9rzy9TB6l3vRziuKuA=s64","userId":"14306816453826020803"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["def load_model(model_name):\n","  model_dir = \"/content/drive/My Drive/VOCdevkit/\" + model_name\n","  model_dir = pathlib.Path(model_dir)/\"saved_model\"\n","\n","  model = tf.saved_model.load(str(model_dir))\n","  model = model.signatures['serving_default']\n","\n","  return model\n","  \n","PATH_TO_LABELS = '/content/models/research/object_detection/data/pascal_label_map.pbtxt'\n","category_index = label_map_util.create_category_index_from_labelmap(PATH_TO_LABELS, use_display_name=True)\n","\n","# If you want to test the code with your images, just add path to the images to the TEST_IMAGE_PATHS.\n","PATH_TO_TEST_IMAGES_DIR = pathlib.Path('/content/drive/My Drive/VOCdevkit/VOC2012/JPEGImages')\n","TEST_IMAGE_PATHS = sorted(list(PATH_TO_TEST_IMAGES_DIR.glob(\"*.jpg\")))\n","\n","model_name = \"trained_model\"\n","detection_model = load_model(model_name)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["INFO:tensorflow:Saver not created because there are no variables in the graph to restore\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"JoIPj0tptOHv","colab_type":"code","colab":{}},"source":["def run_inference_for_single_image(model, image):\n","  image = np.asarray(image)\n","  # The input needs to be a tensor, convert it using `tf.convert_to_tensor`.\n","  input_tensor = tf.convert_to_tensor(image)\n","  # The model expects a batch of images, so add an axis with `tf.newaxis`.\n","  input_tensor = input_tensor[tf.newaxis,...]\n","\n","  # Run inference\n","  output_dict = model(input_tensor)\n","\n","  # All outputs are batches tensors.\n","  # Convert to numpy arrays, and take index [0] to remove the batch dimension.\n","  # We're only interested in the first num_detections.\n","  num_detections = int(output_dict.pop('num_detections'))\n","  output_dict = {key:value[0, :num_detections].numpy() \n","                 for key,value in output_dict.items()}\n","  output_dict['num_detections'] = num_detections\n","\n","  # detection_classes should be ints.\n","  output_dict['detection_classes'] = output_dict['detection_classes'].astype(np.int64)\n","   \n","  # Handle models with masks:\n","  if 'detection_masks' in output_dict:\n","    # Reframe the the bbox mask to the image size.\n","    detection_masks_reframed = utils_ops.reframe_box_masks_to_image_masks(\n","              output_dict['detection_masks'], output_dict['detection_boxes'],\n","               image.shape[0], image.shape[1])      \n","    detection_masks_reframed = tf.cast(detection_masks_reframed > 0.5,\n","                                       tf.uint8)\n","    output_dict['detection_masks_reframed'] = detection_masks_reframed.numpy()\n","    \n","  return output_dict\n","\n","def show_inference(model, image_path):\n","  image_np = np.array(Image.open(image_path))\n","  # Actual detection.\n","  output_dict = run_inference_for_single_image(model, image_np)\n","  # Visualization of the results of a detection.\n","  vis_util.visualize_boxes_and_labels_on_image_array(\n","      image_np,\n","      output_dict['detection_boxes'],\n","      output_dict['detection_classes'],\n","      output_dict['detection_scores'],\n","      category_index,\n","      instance_masks=output_dict.get('detection_masks_reframed', None),\n","      use_normalized_coordinates=True,\n","      line_thickness=8)\n","  img = Image.fromarray(image_np)\n","  # img.save(image_path)\n","  display(Image.fromarray(image_np))\n","\n","for image_path in TEST_IMAGE_PATHS:\n","  show_inference(detection_model, image_path)\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"kuLbnXxtKMLT","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]}]}